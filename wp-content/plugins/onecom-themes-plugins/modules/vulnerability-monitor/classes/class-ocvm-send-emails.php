<?php

class OCVMSendEmails
{
    use OCVMVulnerabilities;
    private $settings;
    private $emailDir;
    public $site_url;

    private $guide_links = [
        'en' => 'https://help.one.com/hc/en-us/articles/4402283373841-Roll-back-plugins-and-themes-to-a-previous-version',
        'da' => 'https://help.one.com/hc/da/articles/4402283373841-Rul-plugins-og-temaer-tilbage-til-en-tidligere-version',
        'de' => 'https://help.one.com/hc/de/articles/4402283373841-Zur%C3%BCcksetzen-von-Plugins-und-Themes-auf-eine-fr%C3%BChere-Version',
        'es' => 'https://help.one.com/hc/es/articles/4402283373841-Revertir-plugins-y-temas-a-una-versi%C3%B3n-anterior-',
        'fr'=> 'https://help.one.com/hc/fr/articles/4402283373841-R%C3%A9initialisation-des-plugins-et-des-th%C3%A8mes-%C3%A0-une-version-ant%C3%A9rieure',
        'fi' => 'https://help.one.com/hc/fi/articles/4402283373841-Palauta-pluginit-ja-teemat-edelliseen-versioon',
        'it' => 'https://help.one.com/hc/it/articles/4402283373841-Ripristina-plugin-e-temi-alla-versione-precedente',
        'nl' => 'https://help.one.com/hc/nl/articles/4402283373841-Zet-plugins-en-thema-s-terug-naar-een-vorige-versie',
        'no' => 'https://help.one.com/hc/no/articles/4402283373841-Tilbakerull-plugins-og-temaer-til-en-tidligere-versjon',
        'pt' => 'https://help.one.com/hc/pt/articles/4402283373841-Reverter-plugins-e-temas-para-uma-vers%C3%A3o-anterior',
        'sv' => 'https://help.one.com/hc/sv/articles/4402283373841-%C3%85terladdade-till%C3%A4gg-och-teman-till-en-f%C3%B6reg%C3%A5ende-version-'

    ];
    public function __construct()
    {
        $this->settings = new OCVMSettings();
        $this->emailDir = plugin_dir_path(dirname(__FILE__)) . "templates/partials/";

        $this->site_url = get_bloginfo('url');
        $this->site_url = str_replace("http://","",$this->site_url);
        $this->site_url = str_replace("https://","",$this->site_url);
        $this->site_url = str_replace("www.","",$this->site_url);
    }


    /**
     * Check if email for this vulnerability is already sent
     */
    public function emailAlreadySent()
    {
        // check in DB if any mail was already sent or not.
    }

    /**
     * Prepare subject
     */
    public function prepareSubject($type): string
    {
        $subject = sprintf(__("Vulnerability found on %s by one.com WordPress Vulnerability Monitor.", OC_PLUGIN_DOMAIN), $this->site_url);

        if ("vulsFixed" === $type) {
            $subject = sprintf(__("Vulnerability fixed on %s by one.com WordPress Vulnerability Monitor.", OC_PLUGIN_DOMAIN), $this->site_url);
        }
        return $subject;
    }


    /**
     * Prepare reference text
     */
    public function prepareReference($type): string
    {

        $text = sprintf(__("Vulnerability detected in your WordPress installation on %s", OC_PLUGIN_DOMAIN), $this->site_url);

        if ("vulsFixed" === $type) {
            $text = sprintf(__("Vulnerability fixed in your WordPress installation on %s", OC_PLUGIN_DOMAIN), $this->site_url);
        }
        return $text;
    }


    /**
     * Fix steps
     */
    public function fixSteps():string
    {
        $html =  "<ol>";

        $html .= "<li>".__("Update the plugin or theme listed below to a newer version.", OC_PLUGIN_DOMAIN)."</li>";

        $html .= "<li>".__("If there is no update available, we recommend deleting the plugin or theme and replacing it with an alternative.", OC_PLUGIN_DOMAIN)."</li>";

        $html .= "<li>".sprintf(__("If you experience issues on your site after updating, please follow our guide to %sroll back to a previous version%s", OC_PLUGIN_DOMAIN), "<a href='https://help.one.com/hc/en-us/articles/4402283373841' style='color:#0078c8;text-decoration:underline'>", "</a>")."</li>";

        $html .= "</ol>";

        $html .= __("Note that vulnerabilities can exist in your live website and staging environment, and need to be fixed separately in both locations.", OC_PLUGIN_DOMAIN);

        return $html;
    }

    /**
     * Prepare disclaimer text
     */
    public function prepareDisclaimer($type, $items)
    {
        $namesArr = [];

        // seat belt (prepare default array)
        $items = array_merge(['plugins' => [], 'themes' => []], $items);

        foreach ($items['plugins'] as $slug => $data){
            $namesArr[] = $data['name'] .' v'. $data['installed_version'];
        }

        foreach ($items['themes'] as $slug => $data){
            $namesArr[] = $data['name'] .' v'. $data['installed_version'];
        }

        $text = sprintf("Please, disregard this email if you already updated %s to a newer version.", implode(", ", $namesArr));
        return $text;
    }


    /**
     * Prepare Email HTML body
     */
    public function prepareEmail($type, $items = []): string
    {

        if (empty($items)) {
            return "";
        }

        $templatePath = $this->emailDir . "mail-{$type}.html";
        $emailHTML = file_get_contents($templatePath, true);

        if (empty($emailHTML)) {
            error_log("Could not load email html. Aborting email send task...");
            return "";
        }

        // Common texts

        $site_url = get_bloginfo('url');
        $emailHTML = str_replace("{{site_url}}", $site_url, $emailHTML);

        $emailHTML = str_replace("{{subject}}", $this->prepareSubject($type), $emailHTML);
        $emailHTML = str_replace("{{reference}}", $this->prepareReference($type), $emailHTML);
        $emailHTML = str_replace("{{hi}}", __("Hi,", OC_PLUGIN_DOMAIN), $emailHTML);
        $emailHTML = str_replace("{{reference_text}}", __("Reference", OC_PLUGIN_DOMAIN), $emailHTML);
        $emailHTML = str_replace("{{have_a_question}}", __("Have a question? We're here to help.", OC_PLUGIN_DOMAIN), $emailHTML);
        $emailHTML = str_replace("{{contact_us}}", __("Contact us today", OC_PLUGIN_DOMAIN), $emailHTML);
        $emailHTML = str_replace("{{business_terms}}", __("Business terms", OC_PLUGIN_DOMAIN), $emailHTML);
        $emailHTML = str_replace("{{privacy_policy}}", __("Privacy policy", OC_PLUGIN_DOMAIN), $emailHTML);
        $emailHTML = str_replace("{{unsubscribe_text}}", __("Unsubscribe", OC_PLUGIN_DOMAIN), $emailHTML);

        if ("vulsFound" === $type) {
            $emailHTML = str_replace("{{starter_type_found}}", __("Our Vulnerability Monitor for WordPress found a potential security risk in your WordPress installation on", OC_PLUGIN_DOMAIN), $emailHTML);

            $emailHTML = str_replace("{{disclaimer}}", $this->prepareDisclaimer($type, $items), $emailHTML);

            $emailHTML = str_replace("{{fix_title}}", __("To fix this:", OC_PLUGIN_DOMAIN), $emailHTML);

            $emailHTML = str_replace("{{fix_steps}}", $this->fixSteps(), $emailHTML);

            $emailHTML = str_replace("{{vulnerabilities_title}}", __("Detected vulnerabilities", OC_PLUGIN_DOMAIN), $emailHTML);

            $emailHTML = str_replace("{{update_now}}", __("Update now", OC_PLUGIN_DOMAIN), $emailHTML);

            $emailHTML = str_replace("{{tip_auto_update}}", __("Tip! Enable the auto-update feature for the Vulnerability monitor in your WordPress dashboard to fix issues automatically.", OC_PLUGIN_DOMAIN), $emailHTML);

            $emailHTML = str_replace("{{tip_link_text}}", __("Click here to enable auto-update feature.", OC_PLUGIN_DOMAIN), $emailHTML);
        }

        else{
            $locale = explode('_', get_locale())[0];
            $emailHTML = str_replace("{{starter_type_fixed}}", sprintf(__("Our Vulnerability Monitor for WordPress fixed a potential security risk in your WordPress installation on %s by updating the below mentioned.", OC_PLUGIN_DOMAIN), $this->site_url), $emailHTML);

            $link = '<a style="color:#0078c8; text-decoration: underline" href="'.$this->guide_links[$locale].'" target="_blank">';
            $recomm_text = sprintf(__("We recommend that you check your website to see if everything is still working as expected. If you experience issues, please follow our guide to %sroll back to a previous version%s.", OC_PLUGIN_DOMAIN), $link, "</a>");

            $recomm_text .= "<br><br>";

            $recomm_text .= __("Note that vulnerabilities can exist both in your live website and staging environment. Please, do a manual update if you don't have automatic updates enabled in both locations.", OC_PLUGIN_DOMAIN);

            $emailHTML = str_replace("{{fix_steps}}", $recomm_text, $emailHTML);

            $emailHTML = str_replace("{{vulnerabilities_title}}", __("Fixed vulnerabilities", OC_PLUGIN_DOMAIN), $emailHTML);

            $emailHTML = str_replace("{{view_site}}", __("View site", OC_PLUGIN_DOMAIN), $emailHTML);

        }



        $adminUrl = is_multisite() ? get_admin_url() : admin_url();
        $updateLink = $adminUrl . 'update-core.php?force-check=1';

        $emailHTML = str_replace("{{admin_url}}", $adminUrl, $emailHTML);
        $emailHTML = str_replace("{{update_link}}", $updateLink, $emailHTML);

        $vulsHTML = "";

        //Update unsubscribe link
        $vmPageSlug = "admin.php?page=onecom-wp-health-monitor";
        $vm_page_link = is_multisite() ? get_admin_url($vmPageSlug) : admin_url($vmPageSlug);
        $emailHTML = str_replace("{{vm_page_link}}", $vm_page_link, $emailHTML);

        if ("vulsFound" === $type) {

            $itemsArr = [];
            if (!empty($items['plugins'])) {
                $itemsArr = array_merge($itemsArr, $items['plugins']);
            }
            if (!empty($items['themes'])) {
                $itemsArr = array_merge($itemsArr, $items['themes']);
            }
            if (!empty($items['wp'])) {
                $itemsArr['WordPress core'] = $items['wp'];
            }

            // iterate through items
            foreach ($itemsArr as $item) {
                $vulsHTML .= $item['name'] . ' v'. $item['installed_version'];
                $vulsHTML .= "<ul>";


                // iterate through vulnerabilities belonging to this item
                foreach ($item['vulnerabilities'] as $v) {
                    $vtype = "wp_vul_" . strtolower(str_replace(" ", "_", $v['vuln_type']));
                    $vulsHTML .= "<li>" . $this->vulTranslation($vtype) . "<br>";
                    $vulsHTML .= sprintf("<a style='color:#0078c8; text-decoration: underline' href='https://wpscan.com/vulnerability/%s'>%s</a></li>", $v['id'], __("Read more", OC_PLUGIN_DOMAIN));
                }

                $vulsHTML .= "</ul><br>";

            }
        } else {
            // iterate through items
            $now_updated_text = __("now updated to %s", OC_PLUGIN_DOMAIN);
            foreach ($items as $item) {

                $vulsHTML .= $item['name'] . " v" . $item['old_version'] . " <em>(".sprintf($now_updated_text, "v".$item['new_version']).")</em>";
                $vulsHTML .= "<ul>";


                // iterate through vulnerabilities belonging to this item
                foreach ($item['vuls'] as $id => $text) {
                    $vulsHTML .= "<li>" . __($text, OC_PLUGIN_DOMAIN) . "<br>";
                    $vulsHTML .= "<a style='color:#0078c8; text-decoration: underline' href='https://wpscan.com/vulnerability/{$id}'>" . __("Read more", OC_PLUGIN_DOMAIN) . "</a></li>";
                }

                $vulsHTML .= "</ul><br>";
            }
        }

        // put things together
        $emailHTML = str_replace("{{vulnerabilities}}", $vulsHTML, $emailHTML);

        return $emailHTML;
    }

    /**
     * Get recipient emails
     */
    public function getRecipients(): array
    {
        $settings = $this->settings->get();
        $notifyAdmins = $settings['settings']['notify_admin'];

        $emails = [];
        if (1 === $notifyAdmins) {

            // WP_User_Query arguments
            $args = array(
                'role' => 'Administrator',
                'fields' => array('user_email'),
            );

            // The User Query
            $user_query = new WP_User_Query($args);
            $all_users = $user_query->results;

            foreach ($all_users as $user) {
                $emails[] = $user->user_email;
            }
        }

        // merge custom emails into all emails
        if (!empty($settings['settings']['custom_emails'])) {
            $emails = array_merge($emails, $settings['settings']['custom_emails']);
        }

        return $emails;
    }

    /**
     * Remove update-attempt records once the email is sent
     */
    public function removeAttemptRecords($type = "successful")
    {
        // get latest state from DB
        $settings = $this->settings->get();

        // remove the item for which we have attempted an update
        unset($settings['update_attempts'][$type]);
        $this->settings->update($settings);
    }

    /**
     * Vuls fixed mail
     */
    public function vulsFixedMail($type)
    {
        $vuls = $this->settings->get();

        if (empty($vuls['update_attempts']['successful'])) {
            error_log("Skipping send_mail by rule...[Could not find any successful update attempt]");
            return false;
        }

        $emailHTML = $this->prepareEmail($type, $vuls['update_attempts']['successful']);
        $emailSubject = $this->prepareSubject($type);

        $recipients = $this->getRecipients();

        $headers = array('Content-Type: text/html; charset=UTF-8');
        $to = $recipients[0];
        unset($recipients[0]);
        foreach ($recipients as $recipient) {
            $headers[] = 'Cc: ' . $recipient;
        }
        add_filter( 'wp_mail_from_name', [$this, 'mail_from_name']);
        $mail_sent = wp_mail($to, $emailSubject, $emailHTML, $headers);
        remove_filter( 'wp_mail_from_name', [$this, 'mail_from_name']);
        if ($mail_sent) {
            error_log("~~~ Email sent successfully!~~~");
            $this->{$type . "Stats"}($vuls['update_attempts']);
            $this->removeAttemptRecords();
            return true;
        } else {
            error_log("FAILED to send emails $emailSubject");
            return false;
        }
    }

    /**
     * Vuls found mail
     */
    public function vulsFoundMail($type)
    {
        $vuls = $this->settings->get();

        if (empty($vuls['vulnerabilities'])) {
            error_log("Skipping send_mail by rule...[Could not find any vulnerabilities]");
            return false;
        }

        $emailHTML = $this->prepareEmail($type, $vuls['vulnerabilities']);
        $emailSubject = $this->prepareSubject($type);

        $recipients = $this->getRecipients();

        $headers = array('Content-Type: text/html; charset=UTF-8');
        $to = $recipients[0];
        unset($recipients[0]);
        foreach ($recipients as $recipient) {
            $headers[] = 'Cc: ' . $recipient;
        }
        add_filter( 'wp_mail_from_name', [$this, 'mail_from_name']);
        $mail_sent = wp_mail($to, $emailSubject, $emailHTML, $headers);
        remove_filter( 'wp_mail_from_name', [$this, 'mail_from_name']);
        if ($mail_sent) {
            error_log("~~~ Email sent successfully!~~~");
            $this->{$type . "Stats"}($vuls['vulnerabilities']);
            return true;
        } else {
            error_log("FAILED to send email $emailSubject");
            return false;
        }
    }


    /**
     * Prepare and Send Email
     */
    public function sendEmail($type = "vulsFound")
    {
        $this->{$type . "Mail"}($type);
    }


    /**
     * Send vulsFound stats
     * @param array $vuls
     */
    public function vulsFoundStats($vuls = []): void
    {
        if (empty($vuls)) {
            return;
        }

        $slugs = [];

        if (array_key_exists('wp', $vuls)) {
            $slugs['wp'] = $vuls['wp'];
        }


        foreach ($vuls as $key => $items) {
            foreach ($items as $slug => $item) {

                if(empty($item['vulnerabilities'])){
                    continue;
                }

                $slugs[$key][] = array(
                    'slug' => $slug,
                    'version' => max(array_column($item['vulnerabilities'], 'introduced_in'))
                );
            }
        }

        class_exists('OCPushStats') ?
            OCPushStats::push_vul_monitor_stats('lookup', 'setting', 'vulnerability_monitor', ['vulnerabilities' => $slugs]) :
            '';
    }

    /**
     * Send vulsFixed stats
     * @param array $vuls
     */
    public function vulsFixedStats($attempts = []): void
    {
        if (empty($attempts['successful'])) {
            return;
        }

        class_exists('OCPushStats') ?
            OCPushStats::push_vul_monitor_stats('upgrade', 'setting', 'vulnerability_monitor', ['vulnerabilities' => $attempts]) :
            '';
    }

    /**
     * Change the sender name in emails
     * @param string $original_email_from
     * @return string
     */
    public function mail_from_name( $original_email_from ){
        return 'one.com Vulnerability Monitor';
    }

}