<?php

class OCVMNotifications
{
    use OCVMVulnerabilities;

    private $settings;
    public $notices = [];
    const dismissFlag = 'ocvm_ignore_%s_notice_%s';
    const DISMISS_NOTIFICATION = 24;
    public $noticeHTML;


    // this to be called on admin page in wp-admin
    public function __construct()
    {
        $this->settings = new OCVMSettings();
        $this->noticeHTML = $this->settings->templateDir . "/partials/notice.html";
    }

    /**
     * Get FQN of plugin by slug
     * @param $slug string Theme's stylesheet or Plugin's PHP dir name
     * @return string Name of the plugin/theme
     */
    public function get_name_for_slug($slug, $type): string
    {
        if ("themes" === $type) {
            // theme headers
            $themeData = wp_get_theme($slug);
            return $themeData->get('Name');
        }

        require_once ABSPATH . 'wp-admin/includes/plugin.php';
        $plugin_files = get_plugins('/' . $slug);
        if (!$plugin_files) {
            return '';
        }
        $plugin_files = array_keys($plugin_files);
        $plugin_dir = $slug . '/' . reset($plugin_files);
        $pluginData = get_plugin_data(trailingslashit(WP_PLUGIN_DIR) . $plugin_dir);
        return $pluginData['Name'];
    }

    /**
     * Prepare notifications
     * @param int $expanded
     * @return string notice html
     */
    public function notificationHTML($expanded = 0)
    {
        $allPageClass = (0 === $expanded) ? "allpageNotification" : "";
        $notifications = '<div id="ocvm-parent-wrap" class="' . $allPageClass . '">
            <div class="one_wrap wrap">
                <ul class="vulnerabilities">';

        foreach ($this->notices as $notice) {
            $singleItem = file_get_contents($this->noticeHTML, true);
            $slug_name = $notice['slug'];

            // slug_vul_description
            if ("wp" == $notice['type']) {
                $desc = __("Outdated WordPress core make your site vulnerable to security attacks. You should consider updating to the latest version.", OC_PLUGIN_DOMAIN);
                $generalDesc = sprintf(__("WordPress core updates are managed from the Updates section in WP Admin. %sGo to Dashboard > Updates%s to do it manually.", OC_PLUGIN_DOMAIN), "<a href={{update_link}}>", "</a>");
                $btnTitle = __("Update WordPress", OC_PLUGIN_DOMAIN);
                $typeText = "core";
                $slug_name = "WordPress";

            } else if ("plugins" == $notice['type']) {
                $desc = __("Outdated plugins make your site vulnerable to security attacks. You should also delete plugins you do not use.", OC_PLUGIN_DOMAIN);
                $generalDesc = sprintf(__("Go to %sWP Admin > Updates%s and update all plugins for which a newer version is available.", OC_PLUGIN_DOMAIN), "<a href={{update_link}}>", "</a>");
                $btnTitle = __("Update Plugin", OC_PLUGIN_DOMAIN);
                $typeText = __("Plugin", OC_PLUGIN_DOMAIN);
            } else {
                $desc = __("Outdated themes make your site vulnerable to security attacks. You should also delete themes you do not use.", OC_PLUGIN_DOMAIN);
                $generalDesc = sprintf(__("Go to %sWP Admin > Updates%s and update all themes for which a newer version is available.", OC_PLUGIN_DOMAIN), "<a href={{update_link}}>", "</a>");

                $btnTitle = __("Update Theme", OC_PLUGIN_DOMAIN);
                $typeText = __("Theme", OC_PLUGIN_DOMAIN);
            }

            // slug_vul_description
            $singleItem = str_replace("{{slug_vul_description}}", $desc, $singleItem);


            // slug
            $singleItem = str_replace("{{slug}}", $notice['slug'], $singleItem);

            // slug_name
            $singleItem = str_replace("{{slug_name}}", $this->get_name_for_slug($notice['slug'], $notice['type']), $singleItem);

            // type
            $singleItem = str_replace("{{type}}", $typeText, $singleItem);


            // general_desc
            $singleItem = str_replace("{{general_desc}}", $generalDesc, $singleItem);


            // button_title
            // $singleItem = str_replace("{{button_title}}", $btnTitle, $singleItem);


            // actions hidden
            $singleItem = str_replace(
                "{{actions_hidden}}",
                1 === $expanded ? 'style="display:none;"' : '',
                $singleItem
            );


            //Do not show this again
            $singleItem = str_replace("{{do_not_show_again}}", __('Do not show this again',OC_PLUGIN_DOMAIN), $singleItem);

            // expanded
            $singleItem = str_replace(
                "{{expanded}}",
                ((1 === $expanded) ? "expanded" : ""),
                $singleItem
            );

            // current user id
            $singleItem = str_replace("{{uid}}", get_current_user_id(), $singleItem);

            //update link
            // Go to admin area
            $redirect_page = is_multisite() ? get_admin_url() : admin_url();
            $redirect_page .= 'update-core.php?force-check=1';
            $singleItem = str_replace("{{update_link}}", $redirect_page, $singleItem);

            $settings = $this->settings->get();
            $vuls = $settings['vulnerabilities'];

            if ("wp" === $notice['type']) {
                $itemVuls = $vuls[$notice['type']]['vulnerabilities'];
            } else {
                $itemVuls = $vuls[$notice['type']][$notice['slug']]['vulnerabilities'];
            }

            // slug_vuls
            $itemVulsHTML = '<ul>';
            foreach ($itemVuls as $vul) {
                $vtype = "wp_vul_" . strtolower(str_replace(" ", "_", $vul['vuln_type']));
                $itemVulsHTML .= sprintf("<li>%s</li>", $this->vulTranslation($vtype));
            }
            $itemVulsHTML .= '</ul>';

            $singleItem = str_replace("{{slug_vuls}}", $itemVulsHTML, $singleItem);

            $notifications .= $singleItem;

        }

        $notifications .= "</ul>
        </div>
        </div>";

        return $notifications;

    }

    /**
     * Check if a notice is dismissed
     */
    public function isDismissed($slug): int
    {
        return get_site_transient(
            sprintf(self::dismissFlag, $slug, get_current_user_id())
        );
    }

    /**
     * Is item still active
     */
    public function isActive($item, $vuls): bool
    {
        //seat belt
        if (empty($item)) {
            return false;
        }

        if ("plugins" === $item['type']) {

            if (!function_exists('get_plugins')) {
                require_once ABSPATH . 'wp-admin/includes/plugin.php';
            }

            // get details of installed plugin by its slug
            $plugin_files = get_plugins('/' . $item['slug']);

            // get plugin name (array)
            $single_plugin = array_keys($plugin_files);

            $plugin_path = $item['slug'] . '/' . reset($single_plugin);

            // exit if the plugin is not active
            if(false === is_plugin_active($plugin_path)){
                return false;
            }

            // check if plugin's current active version matches the vulnerable version
            if(!empty($vuls) && !empty($vuls[$item['type']][$item['slug']])){

                // get plugin version of first plugin by its name
                $plugin_installed_ver = $plugin_files[reset($single_plugin)]['Version'];
                $plugin_vulnerable_ver = $vuls[$item['type']][$item['slug']]['installed_version'];

                if(version_compare($plugin_installed_ver, $plugin_vulnerable_ver) > 0){
                    return false;
                }
            }

            return true;

        } else if("themes" === $item['type']) {
            return $item['slug'] === get_option( 'template' );
        }
        else{
            // type == wp
            return true;
        }

    }

    /**
     * Array iterator
     * @param $items array
     * @return void
     */
    public function arrayIterate($items, $type = ''): void
    {
        if (!empty($items)) {
            foreach ($items as $slug) {
                $this->notices[] = array(
                    'slug' => $slug,
                    'dismissed' => (int)$this->isDismissed($slug),
                    'type' => $type
                );
            }
        }
    }

    /**
     * Prepare notifications to be displayed
     * @return void
     */
    public function prepareNotifications($show_dismissed=0): void
    {
        $settings = $this->settings->get();
        $vuls = empty($settings['vulnerabilities']) ? array() : $settings['vulnerabilities'];

        // in order to follow a default structure
        $vuls = array_merge(array('themes' => [], 'plugins' => [], 'wp' => []), $vuls);

        // collect wp vulnerabilities
        if (!empty($vuls['wp']['vulnerabilities'])) {
            $this->notices[] = array(
                'slug' => 'wp',
                'dismissed' => $this->isDismissed('wp'),
                'type' => 'wp'
            );
        }

        // collect plugins vulnerabilities
        $this->arrayIterate(array_keys((array)$vuls['plugins']), 'plugins');

        // collect themes vulnerabilities
        $this->arrayIterate(array_keys((array)$vuls['themes']), 'themes');

        // filter out the dismissed items
        if(!$show_dismissed){
            $this->notices = array_filter($this->notices, function ($v) {
                return (0 === $v['dismissed']);
            }, ARRAY_FILTER_USE_BOTH);
        }

        // filter out inactive items
        $this->notices = array_filter($this->notices, function ($v) use($vuls) {
            return $this->isActive($v, $vuls);
        });


    }

    /**
     * Show admin notice
     * @return void
     */
    public function showNotifications(): void
    {
        $user = get_user_by('id', get_current_user_id());

        if (!$user->has_cap('update_core') ||
            !$user->has_cap('update_themes') ||
            !$user->has_cap('update_plugins')) {
            return;
        }

        // check screen
        $screen = get_current_screen();
        if ($screen->id === '_page_onecom-wp-health-monitor') {
            return;
        }

        // get notices to display
        $this->prepareNotifications();

        // exit if no notice found
        if (empty($this->notices)) {
            return;
        }

        // render notices
        echo $this->notificationHTML();
    }

    /**
     * Dismiss notifications
     */
    public function dismissNotifications()
    {
        if (isset($_POST['action']) && $_POST['action'] === 'ocvm_dismissNotification') {
            $response = array();
            //set WP transient as per
            if (isset($_POST['dismisstype'])) {
                $dismisstype = $_POST['dismisstype'];

                set_site_transient($dismisstype, 1, 0);
                $response['dismissSetFor'] = $_POST['dismisstype'];
                $response['success'] = true;
            } else {
                $response['dismissSetFor'] = '';
                $response['success'] = false;
            }
            wp_send_json($response);
        }
    }
}