<?php
/**
 * The admin-specific functionality of the module.
 * @package    OCVM
 * @subpackage OCVM/admin
 */

/**
 * The admin-specific functionality of the module.
 *
 * Defines the module name, version, and two examples hooks for how to
 * enqueue the admin-specific stylesheet and JavaScript.
 *
 * @package    OCVM
 * @subpackage OCVM/admin
 * @author     one.com
 */
class OCVMAdmin
{

    /**
     * The ID of this module.
     * @access   private
     * @var      string $OCVM The ID of this module.
     */
    private $OCVM;

    /**
     * The version of this module.
     * @access   private
     * @var      string $version The current version of this module.
     *
     */
    private $version;

    const page_slug = "onecom-wp-vulnerability-monitor";
    const menu_name = "Vulnerability Monitor";

    private $settings;

    /**
     * Initialize the class and set its properties.
     * @param string $OCVM The name of this module.
     * @param string $version The version of this module.
     */
    public function __construct($OCVM, $version)
    {
        $this->OCVM = $OCVM;
        $this->version = $version;

        // Get latest settings
        $this->settings = new OCVMSettings();
    }

    /**
     * Add admin menu entry
     */
    function add_menu()
    {
        add_submenu_page(
            $this->settings::text_domain,
            __("Vulnerability Monitor", $this->settings::text_domain),
            '<span id="onecom_vulnerability_monitor">' . __(self::menu_name, $this->settings::text_domain) . '</span>',
            'manage_options',
            'onecom-wp-vulnerability-monitor',
            [$this, 'vm_page_callback'],
            -1
        );
//        remove_submenu_page($this->settings::text_domain,'onecom-wp-vulnerability-monitor');
    }

    /**
     * Admin page callback
     */
    public function vm_page_callback()
    {
        require $this->settings->module_path . DIRECTORY_SEPARATOR . "templates/vulnerability-monitor-admin-page.php";
    }
    /**
     * Register the stylesheets for the admin area.     */
    public function enqueue_styles($hook_suffix)
    {

        /**
         * This function is provided for demonstration purposes only.
         *
         * An instance of this class should be passed to the run() function
         * defined in OCVMLoader as all of the hooks are defined
         * in that particular class.
         *
         * The OCVMLoader will then create the relationship
         * between the defined hooks and the functions defined in this
         * class.
         */

        //Enqueue css only on HM page
        if($hook_suffix === '_page_onecom-wp-health-monitor'){
            wp_enqueue_style('ocvm-tagEditorStyle', plugin_dir_url(dirname(__FILE__)) . 'assets/css/jquery.tag-editor.css', array(), '', 'all');
        }
        wp_enqueue_style($this->OCVM, plugin_dir_url(dirname(__FILE__)) . 'assets/css/ocvm-admin.css', array(), $this->version, 'all');
    }

    /**
     * Register the JavaScript for the admin area.
     */
    public function enqueue_scripts()
    {

        /**
         * This function is provided for demonstration purposes only.
         *
         * An instance of this class should be passed to the run() function
         * defined in OCVMLoader as all of the hooks are defined
         * in that particular class.
         *
         * The OCVMLoader will then create the relationship
         * between the defined hooks and the functions defined in this
         * class.
         */

        wp_enqueue_script('ocvm-caretScript', plugin_dir_url(dirname(__FILE__)) . 'assets/js/jquery.caret.min.js', array('jquery','media-upload','thickbox','wp-util','jquery-migrate'), '', false);
        wp_enqueue_script('ocvm-tageditorScript', plugin_dir_url(dirname(__FILE__)) . 'assets/js/jquery.tag-editor.min.js', array('jquery'), '', false);
        wp_enqueue_script($this->OCVM, plugin_dir_url(dirname(__FILE__)) . 'assets/js/ocvm-admin.js', array('jquery','ocvm-caretScript','ocvm-tageditorScript'), $this->version, false);
        //create object for localize into script
        $ocvmObj = array(
                    'ajaxurl' => admin_url('admin-ajax.php'),
                    'adminurl' => admin_url(),
                    'isPremium' => (int) $this->settings->isPremium(),
                    );
        wp_localize_script( $this->OCVM, 'ocvmObj', $ocvmObj );
    }

}
